var util = require('util');
var events = require('events');

function SerialQueue() {
  this.reset();
}

util.inherits(SerialQueue, events.EventEmitter);

SerialQueue.prototype.push = function(fn) {
  if(this.fns.push(fn) === 1) {
    this.next();
  }
  return this;
};

SerialQueue.prototype.next = function(force) {
  if(this.status !== SerialQueue.Status.EXECUTING || force) {
    var f = this.fns.shift();
    if(f) {
      this.status = SerialQueue.Status.EXECUTING;
      this.log = [];
      this.errors = [];
      f().then(
        function() {
          this.log = this.log.concat(Array.prototype.slice.call(arguments));
          this.next(true);
        }.bind(this),
        function() {
          var args = Array.prototype.slice.call(arguments);
          this.log = this.log.concat(args);
          this.errors = this.errors.concat(args);
          this.next(true);
        }.bind(this)
      );
    } else {
      this.status = SerialQueue.Status.IDLE;
      this.emit(SerialQueue.Event.DONE, false);
    }
  }
};

SerialQueue.prototype.reset = function() {
  this.fns = [];
  this.log = [];
  this.errors = [];
  this.status = SerialQueue.Status.IDLE;
  return this;
};

SerialQueue.Event = {
  DONE: 'done'
};
Object.freeze(SerialQueue.Event);

SerialQueue.Status = {
  EXECUTING: 'executing',
  IDLE: 'idle'
};
Object.freeze(SerialQueue.Status);

module.exports = SerialQueue;
